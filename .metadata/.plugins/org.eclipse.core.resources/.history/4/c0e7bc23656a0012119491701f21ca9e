/*  
 *   This file is part of the computer assignment for the
 *   Information Retrieval course at KTH.
 * 
 *   First version:  Johan Boye, 2010
 *   Second version: Johan Boye, 2012
 *   Additions: Hedvig Kjellstr√∂m, 2012
 */

package ir;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

import com.larvalabs.megamap.MegaMap;
import com.larvalabs.megamap.MegaMapException;
import com.larvalabs.megamap.MegaMapManager;

public class MegaIndex implements Index {

	/**
	 * The index as a hash map that can also extend to secondary memory if
	 * necessary.
	 */
	private MegaMap index;

	/**
	 * The MegaMapManager is the user's entry point for creating and saving
	 * MegaMaps on disk.
	 */
	private MegaMapManager manager;

	/** The directory where to place index files on disk. */
	private static final String path = "./index";

	/**
	 * Create a new index and invent a name for it.
	 */
	public MegaIndex() {
		try {
			manager = MegaMapManager.getMegaMapManager();
			index = manager
					.createMegaMap(generateFilename(), path, true, false);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create a MegaIndex, possibly from a list of smaller indexes.
	 */
	public MegaIndex(LinkedList<String> indexfiles) {
		try {
			manager = MegaMapManager.getMegaMapManager();
			if (indexfiles.size() == 0) {
				// No index file names specified. Construct a new index and
				// invent a name for it.
				index = manager.createMegaMap(generateFilename(), path, true,
						false);

			} else if (indexfiles.size() == 1) {
				// Read the specified index from file
				index = manager.createMegaMap(indexfiles.get(0), path, true,
						false);
				HashMap<String, String> m = (HashMap<String, String>) index
						.get("..docIDs");
				if (m == null) {
					System.err
							.println("Couldn't retrieve the associations between docIDs and document names");
				} else {
					docIDs.putAll(m);
				}
			} else {
				// Merge the specified index files into a large index.
				MegaMap[] indexesToBeMerged = new MegaMap[indexfiles.size()];
				for (int k = 0; k < indexfiles.size(); k++) {
					System.err.println(indexfiles.get(k));
					indexesToBeMerged[k] = manager.createMegaMap(
							indexfiles.get(k), path, true, false);
				}
				index = merge(indexesToBeMerged);
				for (int k = 0; k < indexfiles.size(); k++) {
					manager.removeMegaMap(indexfiles.get(k));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Generates unique names for index files
	 */
	String generateFilename() {
		String s = "index_" + Math.abs((new java.util.Date()).hashCode());
		System.err.println(s);
		return s;
	}

	/**
	 * It is ABSOLUTELY ESSENTIAL to run this method before terminating the JVM,
	 * otherwise the index files might become corrupted.
	 */
	public void cleanup() {
		// Save the docID-filename association list in the MegaMap as well
		index.put("..docIDs", docIDs);
		// Shutdown the MegaMap thread gracefully
		manager.shutdown();
	}

	/**
	 * Returns the dictionary (the set of terms in the index) as a HashSet.
	 */
	public Set<String> getDictionary() {
		return index.getKeys();
	}

	/**
	 * Merges several indexes into one.
	 */
	MegaMap merge(MegaMap[] indexes) {
		try {
			MegaMap res = manager.createMegaMap(generateFilename(), path, true,
					false);
			for (MegaMap index : indexes) {
				
				/* Fixing names of files <-> docID */
				@SuppressWarnings("unchecked")
				Set<String> keys = (Set<String>) index.getKeys();
				for (String s : keys) {
					if (s.equals("..docIDs")) {
						HashMap<String, String> m = (HashMap<String, String>) index
								.get("..docIDs");
						if (m == null) {
							System.err
									.println("Couldn't retrieve the associations between docIDs and document names");
						} else {
							docIDs.putAll(m);
						}
						continue;
					}
				/* End of fixing name */
					if (res.hasKey(s)) {
						try {
							PostingsList pl = (PostingsList) res.get(s);
							if (pl != null && index.get(s) != null)
								pl.merge((PostingsList) index.get(s));
							else if (index.get(s) != null) {
								pl = (PostingsList) index.get(s);
							}
						} catch (ClassCastException e) {
							System.out.println("error");
						}
					} else if (s != null && index.get(s) != null)
						res.put(s, (PostingsList)((PostingsList) index.get(s)).clone());
				}
			}
			return res;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Inserts this token in the hashtable.
	 */
	public void insert(String token, int docID, int offset) {
		PostingsList list = null;
		try {
			list = (PostingsList) index.get(token);
		} catch (MegaMapException e) {
			e.printStackTrace();
			System.exit(1);
		}
		if (list == null) {
			list = new PostingsList();
			index.put(token, list);
		}
		list.add(docID, offset);
	}

	/**
	 * Returns the postings for a specific term, or null if the term is not in
	 * the index.
	 */
	public PostingsList getPostings(String token) {
		try {
			return (PostingsList) index.get(token);
		} catch (Exception e) {
			return new PostingsList();
		}
	}

	/**
	 * Searches the index for postings matching the query.
	 */
	public PostingsList search(Query query, int queryType, int rankingType) {
		if (queryType == Index.INTERSECTION_QUERY) {
			ArrayList<PostingsList> lists = new ArrayList<PostingsList>();
			for (int i = 0; i < query.terms.size(); i++) {
				PostingsList pl = getPostings(query.terms.get(i));
				if (pl == null)
					return new PostingsList();
				lists.add(pl);
			}

			Collections.sort(lists);

			PostingsList all = lists.get(0);
			lists.remove(0);
			for (PostingsList pl : lists) {
				all = PostingsList.removeAllNotIn(all, pl);
			}
			return all;
		} else if (queryType == Index.PHRASE_QUERY) {
			PostingsList all = getPostings(query.terms.getFirst());
			if (all == null)
				return null;
			for (int i = 1; i < query.terms.size(); i++) {
				PostingsList currentList = getPostings(query.terms.get(i));
				if (currentList == null)
					return null;
				all = PostingsList.removeAllNotFollowedBy(all, currentList);
			}
			return all;
		}
		return null;
	}

}
